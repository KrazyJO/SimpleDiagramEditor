// Press F4 to run your code!


// convention: classes has to be created here
class f {
	constructor() {
		this.str = "f";
	}
}

class Bar {
	constructor(value) {
		this.barValue = 4200;
		this.newFoo = new Foo();
		this.newFoo.newnewFoo = new Foo();
		this.newFoo.newnewFoo.newnewnewFoo = new Foo();
		this.newFoo.newnewFoo.newnewnewFoo.c = "c";
	}
}

let Foo = function () {
	let b = 24;
	this.b = 42;
};

// initialize application in window.onload
window.onload = function () {

	// let bar = new Bar()
	// let foo = new Foo();
	// this.rootModle = { foo: foo, bar: bar, a: "1", b: "2", c: { d: 42 }, e: { f: 12 } }
	// this.rootModle = {b: 12, a: "1"};
	let c = {
		str : 'this is c',
		str2 : 'this is c2'
	};
	let d = {
		str : 'this is d',
		obj : c
	};
	this.rootModle = {b: 12, a: "1", c : c, d : d, e : "eeeee", f : new f(), foo : new Foo()};
	this.debugFunction()
}

//@debug
function debugFunction() {
	this.setStep(1);
	this.setStep(2);
	this.setStep(3);
	this.displayModle();
}

// function step1() {
// 	this.setStep(1);

// 	this.displayModle();
// }

// function step2() {
// 	this.setStep(2);

// 	this.displayModle();
// }

// function step3() {
// 	this.setStep(3);

// 	this.displayModle();
// }

function displayModle() {
	let modleString = this.printObject(this.rootModle);
	const printedModle = document.getElementById('printedModle');
	printedModle.innerText = modleString;
}

function printObject(obj) {
	let modle = "{"

	let keys = Object.keys(obj);
	keys.forEach((key, index) => {
		//need comma?
		if (index !== 0) {
			modle += ',';
		}

		//print obj
		if (typeof obj[key] === "object") {
			let innerObj = this.printObject(obj[key]);
			modle += ` "${key}": ${innerObj}`;
		} else {
			let value = typeof obj[key] === "string" ? '"' + obj[key] + '"' : obj[key];
			modle += ` "${key}": ${value}`;
		}

	});

	modle += "}"

	return modle;
}

function setStep(step) {
	const currentStep = document.getElementById("currentStep");
	currentStep.innerText = "step: " + step;
}